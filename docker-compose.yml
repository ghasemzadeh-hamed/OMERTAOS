version: "3.9"

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: ${AION_DB_USER:-aion}
      POSTGRES_PASSWORD: ${AION_DB_PASSWORD:-aion}
      POSTGRES_DB: ${AION_DB_NAME:-aion}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${AION_DB_USER:-aion}"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"

  minio:
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"

  control:
    build: ./control
    environment:
      AION_CONTROL_API_PREFIX: ${AION_CONTROL_API_PREFIX}
      AION_CONTROL_REDIS_URL: ${AION_CONTROL_REDIS_URL}
      AION_CONTROL_POSTGRES_DSN: ${AION_CONTROL_POSTGRES_DSN}
      AION_CONTROL_MONGO_DSN: ${AION_CONTROL_MONGO_DSN}
      AION_CONTROL_QDRANT_URL: ${AION_CONTROL_QDRANT_URL}
      AION_CONTROL_MODELS_DIRECTORY: ${AION_CONTROL_MODELS_DIRECTORY}
      AION_CONTROL_POLICIES_DIRECTORY: ${AION_CONTROL_POLICIES_DIRECTORY}
      TENANCY_MODE: ${TENANCY_MODE}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
    volumes:
      - ./policies:${AION_CONTROL_POLICIES_DIRECTORY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      qdrant:
        condition: service_started
      minio:
        condition: service_started
    ports:
      - "8000:8000"
      - "50051:50051"
    healthcheck:
      test:
        - "CMD-SHELL"
        - "python -c \"import urllib.request; urllib.request.urlopen('http://localhost:8000/healthz')\""
      interval: 5s
      timeout: 3s
      retries: 30
    command: ["bash", "-lc", "poetry run python -m app.grpc_server & exec uvicorn app.main:app --host 0.0.0.0 --port 8000"]

  gateway:
    build: ./gateway
    environment:
      AION_GATEWAY_PORT: ${AION_GATEWAY_PORT}
      AION_GATEWAY_HOST: ${AION_GATEWAY_HOST}
      AION_CONTROL_GRPC: ${AION_CONTROL_GRPC}
      AION_GATEWAY_API_KEYS: ${AION_GATEWAY_API_KEYS}
      AION_REDIS_URL: ${AION_REDIS_URL}
      AION_RATE_LIMIT_MAX: ${AION_RATE_LIMIT_MAX}
      AION_RATE_LIMIT_PER_IP: ${AION_RATE_LIMIT_PER_IP}
      AION_RATE_LIMIT_WINDOW: ${AION_RATE_LIMIT_WINDOW}
      AION_IDEMPOTENCY_TTL: ${AION_IDEMPOTENCY_TTL}
    depends_on:
      control:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "8080:8080"
    healthcheck:
      test:
        - "CMD"
        - "node"
        - "-e"
        - "fetch('http://localhost:8080/healthz').then(r=>{if(!r.ok) process.exit(1); process.exit(0);}).catch(()=>process.exit(1));"
      interval: 5s
      timeout: 3s
      retries: 30

  console:
    build: ./console
    environment:
      NEXTAUTH_URL: ${NEXTAUTH_URL}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      NEXT_PUBLIC_GATEWAY_URL: ${NEXT_PUBLIC_GATEWAY_URL}
      NEXT_PUBLIC_CONTROL_URL: ${NEXT_PUBLIC_CONTROL_URL}
    depends_on:
      gateway:
        condition: service_healthy
    ports:
      - "3000:3000"
