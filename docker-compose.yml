version: "3.9"
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: aion
      POSTGRES_PASSWORD: aion
      POSTGRES_DB: aion
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aion"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redisdata:/data

  minio:
    image: minio/minio:RELEASE.2024-03-15T02-53-02Z
    environment:
      MINIO_ROOT_USER: aion
      MINIO_ROOT_PASSWORD: aion-secret
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - miniodata:/data

  qdrant:
    image: qdrant/qdrant:v1.7.3
    ports:
      - "6333:6333"

  kafka:
    image: bitnami/kafka:3.6
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka:9093"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  control:
    build: ./control
    env_file: .env.example
    environment:
      - POSTGRES_URL=${POSTGRES_URL}
      - REDIS_URL=${REDIS_URL}
      - EXECUTION_ENDPOINT=http://execution:50051
    depends_on:
      - postgres
      - redis
      - execution
    ports:
      - "8000:8000"

  execution:
    build: ./execution
    environment:
      - EXECUTION_PORT=50051
    ports:
      - "50051:50051"

  gateway:
    build: ./gateway
    env_file: .env.example
    environment:
      - CONTROL_URL=http://control:8000
      - REDIS_URL=${REDIS_URL}
    depends_on:
      - control
      - redis
    ports:
      - "8080:8080"

  web:
    build: ./web
    env_file: .env.example
    environment:
      - NEXTAUTH_URL=http://localhost:8080
      - NEXT_PUBLIC_GATEWAY_URL=http://localhost:8080
    depends_on:
      - gateway
    ports:
      - "3000:3000"

  prometheus:
    image: prom/prometheus:v2.51.2
    volumes:
      - ./observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:10.4.2
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./observability/grafana-dashboards:/var/lib/grafana/dashboards
      - ./observability/grafana-provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"

volumes:
  pgdata:
  redisdata:
  miniodata:
