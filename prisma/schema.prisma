generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  role          String    @default("user")
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  tasks         Task[]
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  tasks       Task[]
  files       File[]
  createdAt   DateTime @default(now())
}

model Task {
  id             String        @id @default(uuid())
  intent         String
  status         String        @default("queued")
  params         Json
  priority       Int           @default(1)
  result         Json?
  owner          User          @relation(fields: [ownerId], references: [id])
  ownerId        String
  project        Project?      @relation(fields: [projectId], references: [id])
  projectId      String?
  activityLogs   ActivityLog[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model ActivityLog {
  id        String   @id @default(uuid())
  action    String
  payload   Json
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    String
  createdAt DateTime @default(now())
}

model File {
  id        String   @id @default(uuid())
  path      String
  mimeType  String
  size      Int
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
